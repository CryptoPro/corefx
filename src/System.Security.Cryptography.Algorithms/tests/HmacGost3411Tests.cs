// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Test.Cryptography;
using Xunit;

namespace System.Security.Cryptography.Hashing.Algorithms.Tests
{
    public class HmacGost3411Tests : HmacTests
    {
        private static readonly byte[][] s_testKeys =
        {
            null,
            ByteUtils.HexToByteArray("762F62DFC3FFCDD5359771DBD811EF7EABBFC29978FC4F10241B17093442EB80"),
            ByteUtils.HexToByteArray("C7F85B22ADAA64BF06E8CD0B77296E162312278B3531AE30EB7332ED0B221294"),
            ByteUtils.HexToByteArray("A4B32F91716891996E5D17F6875238F11B1D3322C977E2F971538FBCD7EF088D"),
            ByteUtils.HexToByteArray("463046C2A2DA79553D96AA123CC871B580822BB79BA9117072AEDFAFD7224B69"),
            ByteUtils.HexToByteArray("FF8C39E98465E2EFFB8B45BF951AABC31B298739B75AC24FF70658C9541E1DE3"),
            ByteUtils.HexToByteArray("F8598C245E4B0C29F4E1BE64BCAF45659B4FAE9FB018653B7A24F28ED81763F8"),
            ByteUtils.HexToByteArray("FA5289BACA81A0189600920BBB7E9D491F04BBDD4C529CFC3459693732CDEED4"),
        };

        private static readonly byte[][] s_testData =
        {
            null,
            ByteUtils.RepeatByte(0x00, 0),
            ByteUtils.HexToByteArray("AC02A0C79625B48D39D6B2A48A38D644166093200AB9C6EF22BFDD378D79AD0F2EF100E766D4F375EB1C319A86FB923AA7966EF4FE3E99A826E25E72AE128486"),
            ByteUtils.HexToByteArray("490B841D8E0CC79F0D630D952B4D5FFB14EEBF8956CCED9C7D6D466E7E36D0B42CA150936D45588442ADC8AC1EA59B562EDA33C11977843236"),
            ByteUtils.HexToByteArray("59357382B792A1ECF713FAA4FCD2A692D4C09871390DAD5BB5FFB48098E073F4EDE7B3C1EFF9C6C3EED104CA59483EAB267E8D59B3818DF4D5041759D8D99AF056D5719C81851E3A02EBFA5CD4B282A138D6AEFB88B4FE"),
            ByteUtils.HexToByteArray("B199F6CC75ED5F22607F11B6B0A51F158B591C7678E522B3A065BAE63BB931E3910255EDC8C9D953758B06466CAB694C478A1A3DD6B7D1869C3173489CD9E092A87FE1EF27F09293CD173FAA1C869FF439BA26EEDB46242710E691A77EC5DB0EBF69DA52B1CD65DEB37E36619C4DCE6A5D930F1A3E4C0FAE6A3AE99FA84FD1560046CA293161980A04F21F3F9F31245307A3F16CAE27F5C5E3A48C08225C7A562C853135FFFB51525F958E3AFF5CFA2C401BA992B8E71F8779887F7B3BF634687EBCBFA2E81D0251075632EEE3D7A2D72C7C196BD0682D2C0F76A016F1E41C2B1BFE003F381CC65DCB9B57DC75DF18F1D24651ED7F9C99CDA5D74A0B88AF24B1505DC8BCFEBCF9025F16E787ECE76DB823C9F2927239BCBDB6B588D74C3B163B"),
            ByteUtils.HexToByteArray("054381E3BAA797B306204B4CFB580BF0C847D12B9B44566D37B1EA91A6B6BFB75A9C94B6938839F14BBE5801C986DBAC1DF1ED57682A46CFA5"),
            ByteUtils.HexToByteArray("93222CA2544FD6AB15C91C6D1061470118CF956127358D233369702E2BC84E93E0D747EA478C4DD0CC909A163E28F82621272EAE78C4E044963F7730D7617844D63BE738EA65317C3142D1E21C6DC02907B344256D4537E1F68FD7DAF11B2F28AA0D8A83626F78074C6AD2FEFB2A8FE12E5BD435F9DC48C45D1EB41E25587B3E999B5D8A14A438CBE5976D853D841BD5FD79EE5A6A347E28ABD587020CD40483D1EA1A724B161154F2A945F30393DBCEB205774424AF93E9A65BD28D906A7CF256ECBCF12C2A0D7D1485C2CCAA1B23B042CF0EBAB53F70896645254B4006B3D7D40535ACE7D1588B5A3D5468D09CFA6BB556D2C556FA48A25AE806527E6F8314E38617A723513742BE2F1AFC88042C09BAE0EC64D6458BA43F2A795F301CC8B5"),
        };

        public HmacGost3411Tests()
            : base(s_testKeys, s_testData)
        {
        }

        protected override HMAC Create()
        {
            return new HMACGost3411();
        }

        protected override HashAlgorithm CreateHashAlgorithm()
        {
            return Gost3411.Create();
        }

        protected override int BlockSize { get { return 32; } }

        [Fact]
        public void HmacGost3411_Byte_Constructors()
        {
            byte[] key = (byte[])s_testKeys[1].Clone();
            string digest = "C7CEA5772FB500019B6ABF9E61F2E2F85B9C9C7ECD431AE34B01EFC54E1234C9";

            using (HMACGost3411 h1 = new HMACGost3411(key))
            {
                VerifyHmac_KeyAlreadySet(h1, 1, digest);
                using (HMACGost3411 h2 = new HMACGost3411(key))
                {
                    VerifyHmac_KeyAlreadySet(h2, 1, digest);
                    Assert.Equal(h1.Key, h2.Key);
                }
            }
        }

        [Fact]
        public void HmacGost3411_1()
        {
            VerifyHmac(1, "C7CEA5772FB500019B6ABF9E61F2E2F85B9C9C7ECD431AE34B01EFC54E1234C9");
        }

        [Fact]
        public void HmacGost3411_2()
        {
            VerifyHmac(2, "3573138FBC035716A58BEE60BF84A4973F2A0D87389BCF9144AC37D653991BFE");
        }

        [Fact]
        public void HmacGost3411_3()
        {
            VerifyHmac(3, "09355E32C28DC786EA48EA0C7AE88641334B106DA08855C6FA39F8647AF01B6C");
        }

        [Fact]
        public void HmacGost3411_4()
        {
            VerifyHmac(4, "17574B0ACF0F594ED491F391D80D5AE5A0C9F7157FC8A374638F638BB74A8510");
        }

        [Fact]
        public void HmacGost3411_5()
        {
            VerifyHmac(5, "B9EA6C5CB490476C5FDB5A5773074E736F442B441504046779208E1A2EF3EA0F");
        }

        [Fact]
        public void HmacGost3411_6()
        {
            VerifyHmac(6, "7096716A0E5F3581764A314D3320205D03812D1863D76DC6477450EC282D7234");
        }

        [Fact]
        public void HmacGost3411_7()
        {
            VerifyHmac(7, "77667F2CAE9B24EA6DDDC28CC505C521CBEC196837C0904C57A670553196E6DD");
        }

        [Fact]
        public void HmacGost3411_Rfc2104_2()
        {
            VerifyHmacRfc2104_2();
        }
    }
}
